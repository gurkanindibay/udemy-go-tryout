name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.25'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: udemy-final-project

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: eventdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download


    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        working-directory: udemy-final-project

    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m

    - name: Run Go tests
      run: go test ./... -v -race -coverprofile=coverage.out
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: eventdb

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Build application
      run: go build -v ./...

  security-test:
    name: Security Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: udemy-final-project

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download


    - name: Run gosec (excluding auto-generated files)
      uses: securego/gosec@v2.21.4
      with:
        args: '-exclude-dir=proto/auth -exclude-dir=proto/event .'

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck
      run: govulncheck ./...

  build-and-test-docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: udemy-final-project
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test-docker
    defaults:
      run:
        working-directory: udemy-final-project

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq netcat-openbsd

    - name: Clean up previous containers
      run: |
        docker compose down -v --remove-orphans || true
        docker system prune -f || true

    - name: Start application with Docker Compose
      run: |
        docker compose up -d
        sleep 30  # Wait for services to be ready

    - name: Wait for services to be healthy
      run: |
        # Wait for REST API
        for i in {1..30}; do
          if curl -s http://localhost:8080 > /dev/null; then
            echo "REST API is ready"
            break
          fi
          echo "Waiting for REST API... ($i/30)"
          sleep 2
        done

        # Wait for gRPC
        for i in {1..30}; do
          if nc -z localhost 50051 2>/dev/null; then
            echo "gRPC server is ready"
            break
          fi
          echo "Waiting for gRPC server... ($i/30)"
          sleep 2
        done

    - name: Run integration tests
      run: |
        chmod +x test.sh
        ./test.sh
      env:
        API_BASE_URL: http://localhost:8080
        GRPC_HOST: localhost:50051
        TEST_USER_EMAIL: ci-test@example.com
        TEST_USER_PASSWORD: ci-test-password

    - name: Show application logs
      if: always()
      run: docker compose logs

    - name: Clean up
      if: always()
      run: |
        docker compose down -v --remove-orphans
        docker system prune -f